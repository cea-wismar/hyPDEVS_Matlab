%% Debug message for DEVS-Simulation messages
%  stored in DEVS_PATH/00-simulator/db_m.p
%
% Is provided as p-code.

% variables
% simtime: current simulation time (gt)
% modeltype: 'A' | 'C'
% modelname: name of the model printing the debug message
% additional: additional information, e.g. end of message, sending to a subcomponent, start an initialization etc.
% t_next: time of next event (after carrying out a message)
% message_type: i-msg | s-msg | x-msg | interp. y-msg | y-msg
% message_activity: send | receive | call
% message_sender: Who sends the message?
% message_receiver: Who receives it?
% function_call: tafunc | deltaintfunc. | deltaextfunc | confluentfunc. | lambdafunc. 

classdef db_m < db_empty
    
    properties 
        
    end
    
    methods
           % constructor
           function obj = db_m(out)
               obj = obj@db_empty();
               obj.out = out; %1; % Standardout (DISPLAY) or can be a opened File -> f = fopen()      
          end
           

           function dbprint(obj,simtime,message_type,d_obj,sub_obj)
               formatstring = '* %12d * %s * %-10s * %-14s* %-10s* %-28s* %-28s* %-14s* %-13s* %11s *\n';
               formatstring2 = '* %12d * %s * %-10s * %-14s* %-10s* %-28s* %-28s* %-14s* %-25s*\n';            
               fprintf(obj.out,['*--------------*---*------------*---------------*',...
                   '-----------*-----------------------------*',...
                   '-----------------------------*---------------*',...
                   '--------------*-------------*\n']);
               if isa(d_obj,'atomic')
                             type_strg = 'A';
                             this_strg = ['sim. of <',d_obj.name,'>'];
               elseif isa(d_obj,'coupled')
                             type_strg = 'C';
                             this_strg = ['coord. of <',d_obj.name,'>'];
               end
               
               if isa(sub_obj,'atomic')
                             receiver_strg = ['sim. of <',sub_obj.name,'>'];
               elseif isa(sub_obj,'coupled')
                             receiver_strg = ['coord. of <',sub_obj.name,'>'];
               end
               
               switch message_type
                   % MESSAGES for coupleds
                   case 1 % begin i-msg of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'i-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin i-msg',...
                           '');
                       
                   case 2 % send i-msg to subcomponent
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'i-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');
                       
                   case 3 % end i-msg coupled
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end i-msg',...
                           num2str(d_obj.tnext));
                       
                   case 4 % begin s-msg (from root) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           's-msg',...
                           'receive',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin s-msg',...
                           '');
                   case 5 % begin s-msg (from superordinate) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           's-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin s-msg',...
                           '');
                   case 6 % send interp. y-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'interp. y-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');
                       
                   case 7 % end s-msg 
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end s-msg',...
                           num2str(d_obj.tnext));
                       
                   case 8 % collect output of subcomponents
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'y-msg',...
                           'receive',...
                           receiver_strg,...
                           ['coord. of <',d_obj.name,'>'],...
                           ' ',...
                           'coll. output.',...
                           '');
                       
                   case 9 % more than one imminent
                       formatstring = '* %12d * %s * %-10s * %-130s *\n';
                       liststring = '*   %-14d   %1d        %-16s \n';
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'more than one imminent subcomponent');
                       fprintf(obj.out,'*   \n');
                       fprintf(obj.out,'*   Eventlist');
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'*   tnext        a(1)/c(2)    name of subcomp.');
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'*   ------------------------------------------');
                       fprintf(obj.out,'\n');
                       for i=1:size(d_obj.eventlist,1)
                        if d_obj.eventlist(i,2) == 1
                            subname = d_obj.Da{d_obj.eventlist(i,3)};
                        end
                        if d_obj.eventlist(i,2) == 2
                            subname = d_obj.Dc{d_obj.eventlist(i,3)};
                        end
                        fprintf(obj.out, liststring,...
                                d_obj.eventlist(i,1),...
                                d_obj.eventlist(i,2),...
                                subname);
                       end
                       fprintf(obj.out,'* \n');
                      
                       
                   case 10 % send x-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'x-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');  
                       
                       
                       
                   case 11 % send s-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           's-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');  
                       
                   case 12 % simultaneuous events
                       formatstring = '* %12d * %s * %-10s * %-130s *\n';
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           ['simultaneuous ext. and int. event in atomic subcomponent <',sub_obj.name,'>']);
                       
                   case 13 % begin interp. y-msg in coupled                       
                       fprintf(obj.out,formatstring2, ...
                           simtime,...
                           type_strg,...
                           d_obj.name,...
                           'interp. y-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           this_strg,...
                           '',...
                           'begin interp. y-msg        ');
                       
                   case 14 % end interp. y-msg
                       formatstring = '* %12d * %s * %-10s * %-14s* %-10s* %-28s* %-28s* %-14s* %-26s *\n';
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           type_strg,...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end interp. y-msg');
                       
                   case 15 % begin x-msg (from superordinate) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'x-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin x-msg',...
                           '');
                       
                       case 16 % end x-msg 
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end x-msg',...
                           num2str(d_obj.tnext));
                       
                       
                       case 17 % begin z-msg (from superordinate) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'z-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin z-msg',...
                           '');
                       
                       case 18 % send z-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'z-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');  
                       
                       case 19 % end z-msg 
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end z-msg',...
                           num2str(d_obj.tnext));
                       
                       case 20 % begin z2-msg (from superordinate) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'z2-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin z-msg',...
                           '');
                       
                       case 21 % send z2-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'z2-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');  
                       
                       case 22 % end z2-msg 
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end z2-msg',...
                           'ioffs set');
                       
                       case 23 % begin se-msg (from superordinate) of coordinator
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'se-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'begin se-msg',...
                           '');
                       
                       case 24 % send se-msg to subcomp.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           'se-msg',...
                           'send',...
                           ['coord. of <',d_obj.name,'>'],...
                           receiver_strg,...
                           '',...
                           'to subcomp.',...
                           '');  
                       
                       case 25 % end se-msg 
                       fprintf(obj.out,formatstring,...
                           simtime,...
                           'C',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end se-msg',...
                           num2str(d_obj.tnext));
                       
                       
                    % in atomics   
                      
                    case 100 % begin i-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'i-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin i-msg',...
                           '');
                      
                       case 101 % end i-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end i-msg',...
                           num2str(d_obj.tnext));
                       
                       case 102 % receive s-msg from ROOT (atomic)
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           's-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'from ROOT',...
                           '');
                       case 103 % receive s-msg from other coordinator (atomic)
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           's-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin s-msg',...
                           '');
                       
                       case 104 % end s-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end s-msg',...
                           num2str(d_obj.tnext));
                       
                       case 105 % begin x-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'x-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin x-msg',...
                           '');
                      
                      
                       case 106 % end x-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end x-msg',...
                           num2str(d_obj.tnext));
                       
                        case 107 % send y-msg to superordinate--> propagate output
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           type_strg,...
                           d_obj.name,...
                           'y-msg',...
                           'send',...
                           this_strg,...
                           'superordinate coordinator',...
                           '',...
                           'propagate it',...
                           '');  
                       
                       case 108 % begin y-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'interp. y-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin y-msg',...
                           '');
                       
                       case 109 % end y-msg atomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end y-msg',...
                           '');
                       
                       case 110 % begin z-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'z-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin z-msg',...
                           '');
                       
                       case 111 % end z-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end z-msg',...
                           [' #ev: ',num2str(d_obj.num_c_state_events)]);
                       
                       case 112 % begin z2-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'z2-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin z2-msg',...
                           '');
                       
                       case 113 % end z2-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end z2-msg',...
                           ['ioffs: ',num2str(d_obj.input_offset)]);
                       
                       case 114 % begin se-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           'se-msg',...
                           'receive',...
                           'superordinate coordinator',...
                           ['sim. of <',d_obj.name,'>'],...
                           '',...
                           'begin se-msg',...
                           '');
                       
                       case 115 % end se-msg hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           '',...
                           '',...
                           '',...
                           '',...
                           'end se-msg',...
                           num2str(d_obj.tnext));
               end
           end
           
           
           function dbprintcall(obj,simtime,message_type,d_obj) % for debug message of atomics connected to characteristic funtions' calls
               formatstring = '* %12d * %s * %-10s * %-14s* %-10s* %-28s* %-28s* %-14s* %-13s* %11s *\n';
               fprintf(obj.out,['*--------------*---*------------*---------------*',...
                   '-----------*-----------------------------*',...
                   '-----------------------------*---------------*',...
                   '--------------*-------------*\n']);
               switch message_type
                   case 1 % call of ta function
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'tafunc.',...
                           '',...
                           '');
                   case 2 % call of deltaintfunc.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'deltaintfunc.',...
                           '',...
                           '');
                   case 3 % call of deltaconffunc.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'deltaconffunc.',...
                           '',...
                           '');
                       
                   case 4 % call of deltaextfunc.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'deltaextfunc.',...
                           '',...
                           '');
                   case 5 % call of lambdafunc.
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'lambdafunc.',...
                           'set output',...
                           '');
                    case 6 % call of csefunc. in hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'csefunc.',...
                           '# of events',...
                           ''); 
                       
                      case 7 % call of deltastatefun. in hybridatomic
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           'A',...
                           d_obj.name,...
                           '',...
                           'call',...
                           '',...
                           '',...
                           'deltastatefun.',...
                           '',...
                           '');   
                       
                       
               end
           end
           
           function dbprintout(obj,simtime,message_type,d_obj,sub_obj) % print ports of subcomponents
               formatstring = '* %12d * %s * %-10s * %-130s *\n';
               fprintf(obj.out,['*--------------*---*------------*----------------',...
                   '------------------------------------------',...
                   '----------------------------------------------',...
                   '----------------------------*\n']);
                if isa(d_obj,'atomic')
                             type_strg = 'A';
                elseif isa(d_obj,'coupled')
                             type_strg = 'C';
                end
                if isa(sub_obj,'atomic')
                        subcomp='atomic';
                else
                        subcomp='coupled';
                end
                       
               switch message_type
                   case 1 % print y
                      fprintf(obj.out,formatstring, ...
                           simtime,...
                           type_strg,...
                           d_obj.name,...
                           ['y of ',subcomp,' subcomponent ',sub_obj.name]);
                       fprintf(obj.out,'*\n*   Set of outputs y\n*   ------------------\n');
                       tmpCell = obj.statestruct2cell(sub_obj.y);
                       for j = 1 : numel(fieldnames(sub_obj.y))
                       fprintf(obj.out,'*   %s:  %s \n',...
                           tmpCell{j,1}, tmpCell{j,2});
                       end
                       fprintf(obj.out,'*\n');
                           
                   case 2 % print x
                       if isa(d_obj,'atomic')
                           comp='atomic';
                       else
                           comp='coupled';
                       end
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           type_strg,...
                           d_obj.name,...
                           ['x of ',comp,' model ',d_obj.name]);
                       fprintf(obj.out,'*\n');
                       fprintf(obj.out, '*   Set of inputs x \n*   ------------------\n');
                       tmpCell = obj.statestruct2cell(d_obj.x);
                       for j = 1 : numel(fieldnames(d_obj.x))
                       fprintf(obj.out,'*   %s:  %s \n',...
                           tmpCell{j,1}, tmpCell{j,2});
                       end
                       fprintf(obj.out,'*\n');
                       
               end
               
           end
           
           function dbprintroot(obj,simtime,message_type,d_obj) % print messages in r_c_discrete
               formatstring = '* %12d * %s * %-10s * %-14s* %-10s* %-28s* %-28s* %-14s* %-13s* %11s *\n';
               splitter1 = ['*--------------*---*------------*---------------*',...
                   '-----------*-----------------------------*',...
                   '-----------------------------*---------------*',...
                   '--------------*-------------*\n'];
               splitter2 = ['*------------------------------------------------',...
                           '------------------------------------------',...
                           '----------------------------------------------',...
                           '----------------------------*\n'];
               
               
               switch message_type
                   case 1
                      fprintf(obj.out,[splitter2,'\n']);
                      fprintf(obj.out,['*** STARTUP ********** STARTUP ********** ',...
                           'STARTUP ********** STARTUP ********** STARTUP ********** ',...
                           'STARTUP ********** STARTUP ********** STARTUP ********* STARTUP ***\n']);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,['* TIME         *   * NAME       * MESSAGE TYPE  ',...
                           '* ACTIVITY  * SENDER                      * RECEIVER                    ',...
                           '* FUNCTION      * ADDITIONAL   * TNEXT       *\n']);
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           'i-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           '',...
                           '');   
                       
                   case 2
                      fprintf(obj.out,[splitter2,'\n']);                      
                      fprintf(obj.out,['*** STEP ******** STEP ******** STEP ******** STEP ******** ',...
                          'STEP ******** STEP ******** STEP ******** STEP ******** STEP ******** ',...
                          'STEP ******* STEP ********* STEP ***\n']); 
                      fprintf(obj.out,'\n');
                      fprintf(obj.out,splitter2);
                       fprintf(obj.out,['* TIME         *   * NAME       * MESSAGE TYPE  ',...
                           '* ACTIVITY  * SENDER                      * RECEIVER                    ',...
                           '* FUNCTION      * ADDITIONAL   * TNEXT       *\n']);
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           's-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           '',...
                           '');  
                       
                      case 3
                      fprintf(obj.out,splitter2);                      
                      fprintf(obj.out,['*** END ********* END ********** END ********** END ',...
                          '********** END ********** END ********** END ********** END ******** ',...
                          'END ******** END ******** END ******* END ***\n']); 
                      fprintf(obj.out,'\n');
                      fprintf(obj.out,splitter2);
                      
                   case 4 % start phase 0 for hybrid simulation
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> Start of initialization phase');
                       fprintf(obj.out,'\n\n');
                       
                       
                   case 5 % end phase 0 for hybrid simulation
                       fprintf(obj.out,splitter2);  
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> End of initialization phase');
                       fprintf(obj.out,'\n\n');
                       
                   case 6 % start phase 1 for hybrid simulation
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> Start of discrete simulation phase');
                       fprintf(obj.out,'\n\n');
                       
                   case 7 % end phase 1 for hybrid simulation
                       fprintf(obj.out,splitter2); 
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> End of discrete simulation phase');
                       fprintf(obj.out,'\n\n');
                       
                   case 8 % start phase 2 for hybrid simulation
                       fprintf(obj.out,splitter2); 
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> Start of continuous simulation phase');
                       fprintf(obj.out,'\n\n');
                       
                  case 9 % end phase 2 for hybrid simulation
                       fprintf(obj.out,splitter2); 
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> End of continuous simulation phase');
                       fprintf(obj.out,'\n\n');   
                       
                       
                  case 10
                      fprintf(obj.out,splitter2);
                      fprintf(obj.out,'\n');
                      fprintf(obj.out,['*** CONTINUOUS ****** CONTINUOUS ******* ',...
                           'CONTINUOUS ******* CONTINUOUS ******* CONTINUOUS ****** ',...
                           'CONTINUOUS ****** CONTINUOUS ******* CONTINUOUS ****** CONTINUOUS ***\n']);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,'>>> Generating continuous model\n\n');
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,['* TIME         *   * NAME       * MESSAGE TYPE  ',...
                           '* ACTIVITY  * SENDER                      * RECEIVER                    ',...
                           '* FUNCTION      * ADDITIONAL   * TNEXT       *\n']);
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           'z-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'vector conf.',...
                           ''); 
                   case 11
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           'z2-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'vector conf.',...
                           ''); 
                    case 12
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,['>>> Continuous model successfully generated\n>>> Continuous simulation from ', num2str(simtime),' to ',num2str(d_obj.tnext)]);
                       fprintf(obj.out,'\n\n'); 
                       
                       
                    case 13
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,['* TIME         *   * NAME       * MESSAGE TYPE  ',...
                           '* ACTIVITY  * SENDER                      * RECEIVER                    ',...
                           '* FUNCTION      * ADDITIONAL   * TNEXT       *\n']);
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           'se-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'no events',...
                           ''); 
                       case 14
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,['* TIME         *   * NAME       * MESSAGE TYPE  ',...
                           '* ACTIVITY  * SENDER                      * RECEIVER                    ',...
                           '* FUNCTION      * ADDITIONAL   * TNEXT       *\n']);
                       fprintf(obj.out,splitter1);
                       fprintf(obj.out,formatstring, ...
                           simtime,...
                           ' ',...
                           'ROOT',...
                           'se-msg',...
                           'send',...
                           'ROOT coordinator',...
                           ['coord. of <',d_obj.name,'>'],...
                           '',...
                           'with events',...
                           '');  
                       
                       case 15
                       fprintf(obj.out,splitter2);
                       fprintf(obj.out,'\n');
                       fprintf(obj.out,['>>> ODE45 returned with events at t = ', num2str(simtime)]);
                       fprintf(obj.out,'\n\n'); 
                             
                       
               end
               
            
           end
           
           
           
   function tmpCell = statestruct2cell(obj,s)

    FldNames = fieldnames(s);
    tmpCell  = cell(numel(FldNames),2);
    j = 1;

    for i = FldNames'
        value = s.(i{:});
        if isempty(value)
            if ischar(value)
                tmpVal = '''''';
            elseif iscell(value)
                tmpVal = '{ }';
            else
                tmpVal = '[ ]';
            end
        elseif ischar(value)
            tmpVal = ['''',value,''''];
        elseif isnumeric(value)
            tmpVal = num2str(value);
        elseif iscell(value)
            if iscellstr(value)
                tmpVal = ['{''',value{1},'''}'];
            elseif isnumeric(value{1}) || islogical(value{1})
                tmpVal = ['{[',num2str(value{1}),']}'];
            elseif isstruct(value{1})
                [z,s] = size(value{1});
                tmpVal = sprintf('{[%dx%d struct]}',z,s);
            else
                tmpVal = 'never mind 1';
            end
        elseif isstruct(value)
            [z,s] = size(value);
            tmpVal = sprintf('%dx%d struct',z,s);
        elseif islogical(value)
            if value
            	tmpVal = 'TRUE';
            else
                tmpVal = 'FALSE';
            end                
        else
            tmpVal = 'never mind 2';
        end

        tmpCell{j,1} = i{:};
        tmpCell{j,2} = tmpVal;
        j = j+1;
    end
   end
           
    end
end


